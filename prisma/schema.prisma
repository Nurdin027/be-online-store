// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  id         String     @id @default(uuid())
  name       String
  userId     String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  banners    Banner[]   @relation("StoreToBanner")
  categories Category[] @relation("StoreToCategory")
  product    Product[]  @relation("StoreToProduct")
}

model Banner {
  id         String     @id @default(uuid())
  storeId    String
  label      String
  imageUrl   String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  store      Store      @relation("StoreToBanner", fields: [storeId], references: [id])
  categories Category[]

  @@index([storeId])
}

model Category {
  id        String    @id @default(uuid())
  storeId   String
  bannerId  String
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  banner    Banner    @relation(fields: [bannerId], references: [id])
  store     Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  products  Product[] @relation("CategoryToProduct")

  @@index([storeId])
  @@index([bannerId])
}

model Product {
  id            String   @id @default(uuid())
  storeId       String
  categoryId    String
  name          String
  price         Decimal
  discountPrice Decimal?
  description   String
  isFeatured    Boolean  @default(false)
  isArchived    Boolean  @default(false)
  isAvailable   Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  images        Image[]
  cartItems     Cart[]
  category      Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
  store         Store    @relation("StoreToProduct", fields: [storeId], references: [id])

  @@index([storeId])
  @@index([categoryId])
}

model Image {
  id        String   @unique @default(uuid())
  productId String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Cart {
  id        String   @id @default(uuid())
  userId    String
  productId String
  storeId   String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product       Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  DetailPayment DetailPayment[]
}

model Payment {
  id               String          @id @default(uuid())
  storeId          String
  userId           String
  paymentCode      String          @unique
  totalPrice       Int
  status           Int             @default(0)
  paidAt           DateTime?
  customer_name    String
  customer_phone   String
  customer_address String
  snap_token       String?
  redirect_url     String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  DetailPayment    DetailPayment[]
}

model DetailPayment {
  id        String  @id @default(uuid())
  paymentId String
  cartId    String
  payment   Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  cart      Cart    @relation(fields: [cartId], references: [id])
}
